[{"C:\\dev\\chatbot\\src\\index.js":"1","C:\\dev\\chatbot\\src\\components\\app\\app.js":"2","C:\\dev\\chatbot\\src\\components\\action-provider\\index.js":"3","C:\\dev\\chatbot\\src\\components\\action-provider\\action-provider.js":"4","C:\\dev\\chatbot\\src\\components\\config\\index.js":"5","C:\\dev\\chatbot\\src\\components\\message-parser\\index.js":"6","C:\\dev\\chatbot\\src\\components\\message-parser\\message-parser.js":"7","C:\\dev\\chatbot\\src\\components\\config\\config.js":"8","C:\\dev\\chatbot\\src\\components\\user-option\\index.js":"9","C:\\dev\\chatbot\\src\\components\\user-option\\user-option.js":"10","C:\\dev\\chatbot\\src\\components\\bot-header\\index.js":"11","C:\\dev\\chatbot\\src\\components\\bot-header\\bot-header.js":"12","C:\\dev\\chatbot\\src\\components\\bot-avatar\\index.js":"13","C:\\dev\\chatbot\\src\\components\\bot-avatar\\bot-avatar.js":"14","C:\\dev\\chatbot\\src\\components\\bot-knowledge-base\\index.js":"15","C:\\dev\\chatbot\\src\\components\\bot-knowledge-base\\bot-knowledge-base.js":"16","C:\\dev\\chatbot\\src\\components\\options-config\\index.js":"17","C:\\dev\\chatbot\\src\\components\\options-config\\options-config.js":"18"},{"size":202,"mtime":1607088242775,"results":"19","hashOfConfig":"20"},{"size":1217,"mtime":1607438612538,"results":"21","hashOfConfig":"20"},{"size":81,"mtime":1607088326734,"results":"22","hashOfConfig":"20"},{"size":6663,"mtime":1607522191147,"results":"23","hashOfConfig":"20"},{"size":56,"mtime":1607088409587,"results":"24","hashOfConfig":"20"},{"size":78,"mtime":1607088357376,"results":"25","hashOfConfig":"20"},{"size":350,"mtime":1607333246790,"results":"26","hashOfConfig":"20"},{"size":5691,"mtime":1607585584572,"results":"27","hashOfConfig":"20"},{"size":69,"mtime":1607342684719,"results":"28","hashOfConfig":"20"},{"size":534,"mtime":1607505472404,"results":"29","hashOfConfig":"20"},{"size":66,"mtime":1607414067008,"results":"30","hashOfConfig":"20"},{"size":257,"mtime":1607414421426,"results":"31","hashOfConfig":"20"},{"size":66,"mtime":1607417380211,"results":"32","hashOfConfig":"20"},{"size":258,"mtime":1607420424910,"results":"33","hashOfConfig":"20"},{"size":88,"mtime":1607513683119,"results":"34","hashOfConfig":"20"},{"size":14916,"mtime":1607583989985,"results":"35","hashOfConfig":"20"},{"size":78,"mtime":1607523060953,"results":"36","hashOfConfig":"20"},{"size":12306,"mtime":1607585682468,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1fhiac5",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\dev\\chatbot\\src\\index.js",[],["78","79"],"C:\\dev\\chatbot\\src\\components\\app\\app.js",["80"],"import React, {Fragment, useState} from 'react';\nimport Chatbot from 'react-chatbot-kit';\n\nimport './app.scss';\n\nimport ActionProvider from '../action-provider';\nimport MessageParser from '../message-parser';\nimport config from '../config';\n\nimport botAvatar from '../../assets/images/bot_icon/bot.svg';\n\nfunction App() {\n\n  const [displayBot, toggleBot] = useState(false);\n\n  const saveMessages = (messages) => {\n    localStorage.setItem(\"nashsever_helper_messages\", JSON.stringify(messages));\n  }; \n\n  const loadMessages = () => {\n    const messages = JSON.parse(localStorage.getItem(\"nashsever_helper_messages\"));\n    return messages;\n  };  \n\n  return (\n    <Fragment>\n      <div className=\"nashsever-helper-bot\"> \n       { \n          displayBot && ( \n            <Chatbot          \n            config={config} \n            actionProvider={ActionProvider} \n            messageHistory={loadMessages()}\n            messageParser={MessageParser}\n            saveMessages={saveMessages}\n          /> \n          )\n        }\n      </div>\n\n      <button className=\"nashsever-helper-toggler\" onClick={()=>toggleBot(prev => !prev)}>\n        <img src={botAvatar}/>\n      </button>\n    </Fragment>\n  );\n}\n\nexport default App;","C:\\dev\\chatbot\\src\\components\\action-provider\\index.js",[],"C:\\dev\\chatbot\\src\\components\\action-provider\\action-provider.js",["81"],"import React from 'react';\r\n\r\nimport botKnowledgeBase from '../bot-knowledge-base';\r\n\r\nclass ActionProvider {\r\n    constructor(createChatBotMessage, setStateFunc, createClientMessage) {\r\n        this.createChatBotMessage = createChatBotMessage;\r\n        this.setState = setStateFunc;\r\n        this.createClientMessage = createClientMessage; \r\n        this.botKnowledge = botKnowledgeBase;       \r\n    }\r\n\r\n    updateChatbotState = (botMessage, userMessage = null) => {\r\n        // NOTE: This function is set in the constructor, and is passed in      \r\n        // from the top level Chatbot component. The setState function here     \r\n        // actually manipulates the top level state of the Chatbot, so it's     \r\n        // important that we make sure that we preserve the previous state.\r\n        console.log(userMessage, typeof userMessage);\r\n\r\n        if(userMessage) {\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                messages: [...prevState.messages, userMessage, botMessage]\r\n            }));\r\n        } else {\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                messages: [...prevState.messages, botMessage]\r\n            }));\r\n        }        \r\n    }      \r\n\r\n    handleDefaultOptions = () => {\r\n        const message = this.createChatBotMessage(\r\n            this.botKnowledge.defaultResponse,\r\n            {\r\n                widget: 'defaultOptions'\r\n            }\r\n        );\r\n\r\n        this.updateChatbotState(message);\r\n    }\r\n\r\n    handleQuestion = (botResponse, widgetName, userResponse = null) => {\r\n        const botMessage = this.createChatBotMessage(botResponse, {widget: widgetName});\r\n        const userMessage = userResponse ? this.createClientMessage(userResponse) : null;\r\n\r\n        this.updateChatbotState(botMessage, userMessage);\r\n    }\r\n\r\n\r\n\r\n    // START USAGE SECTION\r\n\r\n    handleStartUsageQuestionList = () => { \r\n        const botResponse = this.botKnowledge.selectQuestion;        \r\n        const widgetName = 'startUsageQuestionList';\r\n\r\n        this.handleQuestion(botResponse, widgetName);\r\n    }\r\n\r\n    handleStartUsageQuestion = (option) => {\r\n\r\n        const {id, text} = option;\r\n\r\n        const botResponse = this.botKnowledge.startUsage[id];\r\n        const userResponse = text;\r\n        const widgetName = 'startUsageConversationReturn';\r\n\r\n        this.handleQuestion(botResponse, widgetName, userResponse);\r\n    }\r\n    \r\n    // HANDLE PROFILE QUESTIONS\r\n\r\n    handleProfileQuestionList = () => {\r\n        const botResponse = this.botKnowledge.selectQuestion;        \r\n        const widgetName = 'profileQuestionList';\r\n\r\n        this.handleQuestion(botResponse, widgetName);\r\n    }\r\n\r\n    handleProfileQuestion = (option) => {        \r\n        \r\n        const {id, text} = option;\r\n\r\n        const botResponse = this.botKnowledge.profile[id];\r\n        const userResponse = text;\r\n        const widgetName = 'profileConversationReturn';\r\n\r\n        this.handleQuestion(botResponse, widgetName, userResponse);\r\n    }    \r\n\r\n    // HANDLE COMPLAINTS QUESTIONS\r\n\r\n    handleComplaintsQuestionList = () => {\r\n        const botResponse = this.botKnowledge.selectQuestion;\r\n        const widgetName = 'complaintsQuestionList';\r\n\r\n        this.handleQuestion(botResponse, widgetName); \r\n    }\r\n\r\n    handleComplaintsQuestion = (option) => {\r\n                \r\n        const {id, text} = option;\r\n\r\n        const botResponse = this.botKnowledge.complaints[id];        \r\n        const widgetName = 'complaintsConversationReturn';\r\n        const userResponse = text;\r\n\r\n        this.handleQuestion(botResponse, widgetName, userResponse);\r\n    }  \r\n\r\n    // HANDLE VOTINGS QUESTIONS\r\n\r\n    handleVotingsQuestionList = () => {\r\n        const botResponse = this.botKnowledge.selectQuestion;\r\n        const widgetName = 'votingsQuestionList';\r\n\r\n        this.handleQuestion(botResponse, widgetName);\r\n    }\r\n\r\n    handleVotingsQuestion = (option) => {\r\n        \r\n        const {id, text} = option;\r\n\r\n        const botResponse = this.botKnowledge.votings[id];\r\n        const widgetName = 'votingsConversationReturn';\r\n        const userResponse = text;\r\n\r\n        this.handleQuestion(botResponse, widgetName, userResponse);\r\n    }\r\n\r\n    // HANDLE INITIATIVES QUESTIONS\r\n    \r\n    handleInitiativesQuestionList = () => {\r\n        const botResponse = this.botKnowledge.selectQuestion;\r\n        const widgetName = 'initiativesQuestionList';\r\n\r\n        this.handleQuestion(botResponse, widgetName);\r\n    }\r\n\r\n    handleInitiativesQuestion = (option) => {\r\n\r\n        const {id, text} = option;\r\n\r\n        const botResponse = this.botKnowledge.initiatives[id];\r\n        const widgetName = 'initiativesConversationReturn';\r\n        const userResponse = text;\r\n\r\n        this.handleQuestion(botResponse, widgetName, userResponse);\r\n    }\r\n\r\n    // HANDLE BEAUTIFICATION QUESTIONS\r\n\r\n    handleBeautificationQuestionList = () => {\r\n        const botResponse = this.botKnowledge.selectQuestion;\r\n        const widgetName = 'beautificationQuestionList';\r\n\r\n        this.handleQuestion(botResponse, widgetName);\r\n    }\r\n\r\n    handleBeautificationQuestion = (option) => {\r\n        \r\n        const {id, text} = option;\r\n\r\n        const botResponse = this.botKnowledge.beautification[id];\r\n        const widgetName = 'beautificationConversationReturn';\r\n        const userResponse = text;\r\n\r\n        this.handleQuestion(botResponse, widgetName, userResponse);\r\n    }\r\n\r\n    // HANDLE WORKMAP QUESTIONS\r\n\r\n    handleWorkMapQuestionList = () => {\r\n        const botResponse = this.botKnowledge.selectQuestion;        \r\n        const widgetName = 'workMapQuestionList';\r\n\r\n        this.handleQuestion(botResponse, widgetName);\r\n    }\r\n\r\n    handleWorkMapQuestion = (option) => {\r\n\r\n        const {id, text} = option;\r\n\r\n        const botResponse = this.botKnowledge.workmap[id];\r\n        const userResponse = text;\r\n        const widgetName = 'workMapConversationReturn';\r\n\r\n        this.handleQuestion(botResponse, widgetName, userResponse);\r\n    }\r\n\r\n    // HANDLE SUPPORT QUESTIONS\r\n\r\n    handleSupportQuestionList = () => {\r\n        const botResponse = this.botKnowledge.selectQuestion;\r\n        const widgetName = 'supportQuestionList';\r\n\r\n        this.handleQuestion(botResponse, widgetName);\r\n    }\r\n\r\n    handleSupportQuestion = (option) => {\r\n\r\n        const {id, text} = option;\r\n\r\n        const botResponse = this.botKnowledge.support[id];\r\n        const widgetName = 'supportConversationReturn';\r\n        const userResponse = text;\r\n\r\n        this.handleQuestion(botResponse, widgetName, userResponse);\r\n    }\r\n    \r\n};\r\n\r\nexport default ActionProvider;\r\n","C:\\dev\\chatbot\\src\\components\\config\\index.js",[],"C:\\dev\\chatbot\\src\\components\\message-parser\\index.js",[],"C:\\dev\\chatbot\\src\\components\\message-parser\\message-parser.js",["82","83"],"import React from 'react';\r\n\r\nclass MessageParser {\r\n    constructor (actionProvider, state) {\r\n        this.actionProvider = actionProvider;\r\n        this.state = state;\r\n    }\r\n\r\n    parse = (message) => {\r\n        console.log(message);\r\n\r\n        const lowercasedMessage = message.toLowerCase();        \r\n    }\r\n};\r\n\r\nexport default MessageParser;","C:\\dev\\chatbot\\src\\components\\config\\config.js",[],"C:\\dev\\chatbot\\src\\components\\user-option\\index.js",[],"C:\\dev\\chatbot\\src\\components\\user-option\\user-option.js",[],"C:\\dev\\chatbot\\src\\components\\bot-header\\index.js",[],"C:\\dev\\chatbot\\src\\components\\bot-header\\bot-header.js",[],"C:\\dev\\chatbot\\src\\components\\bot-avatar\\index.js",[],"C:\\dev\\chatbot\\src\\components\\bot-avatar\\bot-avatar.js",[],"C:\\dev\\chatbot\\src\\components\\bot-knowledge-base\\index.js",[],"C:\\dev\\chatbot\\src\\components\\bot-knowledge-base\\bot-knowledge-base.js",[],"C:\\dev\\chatbot\\src\\components\\options-config\\index.js",[],"C:\\dev\\chatbot\\src\\components\\options-config\\options-config.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":42,"column":9,"nodeType":"90","endLine":42,"endColumn":31},{"ruleId":"91","severity":1,"message":"92","line":1,"column":8,"nodeType":"93","messageId":"94","endLine":1,"endColumn":13},{"ruleId":"91","severity":1,"message":"92","line":1,"column":8,"nodeType":"93","messageId":"94","endLine":1,"endColumn":13},{"ruleId":"91","severity":1,"message":"95","line":12,"column":15,"nodeType":"93","messageId":"94","endLine":12,"endColumn":32},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'lowercasedMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]